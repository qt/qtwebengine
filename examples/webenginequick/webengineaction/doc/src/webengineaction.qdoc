// Copyright (C) 2018 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \example webenginequick/webengineaction
    \title WebEngine Action Example
    \ingroup webengine-examples
    \brief A simple browser implemented using WebEngineActions.

    \image webengineaction-example.png

    \e {WebEngine Action Example} demonstrates how to perform actions on a web page
    using the \l{WebEngineAction} type. It shows the minimum amount of code needed
    to bind browser functionalities to input elements and build up a custom context
    menu.

    \include examples-run.qdocinc

    \section1 Working With Web Engine Actions

    An intended use of \l{WebEngineAction} is building a connection between UI
    elements and browser commands. It can be added to menus and toolbars via
    assigning its properties to the corresponding ones of the element.

    The \l{ToolButton} relies on the properties provided by a
    \l{WebEngineAction}. Clicking the button triggers backwards navigation on the
    originating \l{WebEngineView} of the action.

    \quotefromfile webenginequick/webengineaction/main.qml
    \skipto ToolButton {
    \printuntil }

    The simplest way to create custom context menus is enumerating the required
    \l{WebEngineAction} types in a data model and instantiating \l{MenuItem} types
    for them, for example using a \l{Repeater}.

    \quotefromfile webenginequick/webengineaction/main.qml
    \skipto property Menu contextMenu: Menu {
    \printuntil /^ {8}\}/

    Assigning a \l{WebEngineAction} to multiple UI elements will keep them in sync.
    As it can be seen in the picture above, if the browser engine disables a
    navigation action, both corresponding menu items will be disabled.
*/
