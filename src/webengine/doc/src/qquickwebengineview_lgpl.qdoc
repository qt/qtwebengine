/*
 * Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 * Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
 * Copyright (c) 2012 Hewlett-Packard Development Company, L.P.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this program; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 *
 */

// The documentation in this file was imported from QtWebKit and is thus constrained
// by its LGPL license. Documentation written from scratch for new methods should be
// placed inline in the code as usual.

/*!
    \page qtwebengine-index.html
    \title Qt WebEngine

    The Qt WebEngine module provides the WebEngineView API which allows QML applications
    to render regions of dynamic web content. A \e{WebEngineView} component may share
    the screen with other QML components or encompass the full screen as
    specified within the QML application.

    It allows an application to load pages into the WebEngineView, either by URL or with
    an HTML string, and navigate within session history. By default,
    links to different pages load within the same WebEngineView, but web sites may
    request them to be opened as a new tab, window or dialog.

    The following sample QML application loads a web page, responds to session
    history context.

    \code
    import QtQuick 2.1
    import QtQuick.Controls 1.1
    import QtWebEngine 1.0

    ApplicationWindow {
        width: 1280
        height: 720
        visible: true
        WebEngineView {
            id: webview
            url: "http://www.qt-project.org"
            anchors.fill: parent
        }
    }
    \endcode

    \section1 Examples

    There are several Qt WebEngine examples located in the
    \l{Qt WebEngine Examples} page.

*/


/*!
    \qmltype WebEngineView
    \instantiates QQuickWebEngineView
    \inqmlmodule QtWebEngine 1.0
    \brief A WebEngineView renders web content within a QML application
*/

/*!
    \qmlmethod void WebEngineView::goBack()

    Go backward within the browser's session history, if possible.
    (Equivalent to the \c{window.history.back()} DOM method.)

    \sa WebEngineView::canGoBack
*/

/*!
    \qmlmethod void WebEngineView::goForward()

    Go forward within the browser's session history, if possible.
    (Equivalent to the \c{window.history.forward()} DOM method.)
*/

/*!
    \qmlmethod void WebEngineView::stop()

    Stop loading the current page.
*/

/*!
    \qmlmethod void WebEngineView::reload()

    Reload the current page. (Equivalent to the
    \c{window.location.reload()} DOM method.)
*/

/*!
    \qmlproperty url WebEngineView::url

    The location of the currently displaying HTML page. This writable
    property offers the main interface to load a page into a web view.
    It functions the same as the \c{window.location} DOM property.

    \sa WebEngineView::loadHtml()
*/

/*!
    \qmlproperty url WebEngineView::icon

    The location of the currently displaying Web site icon, also known as favicon
    or shortcut icon. This read-only URL corresponds to the image used within a
    mobile browser application to represent a bookmarked page on the device's home
    screen.

    This example uses the \c{icon} property to build an \c{Image} element:

    \code
    Image {
        id: appIcon
        source: webView.icon != "" ? webView.icon : "fallbackFavIcon.png";
        ...
    }
    \endcode
*/

/*!
    \qmlproperty int WebEngineView::loadProgress

    The amount of the page that has been loaded, expressed as an integer
    percentage in the range from \c{0} to \c{100}.
*/

/*!
    \qmlproperty bool WebEngineView::canGoBack

    Returns \c{true} if there are prior session history entries, \c{false}
    otherwise.
*/

/*!
    \qmlproperty bool WebEngineView::canGoForward

    Returns \c{true} if there are subsequent session history entries,
    \c{false} otherwise.
*/

/*!
    \qmlproperty bool WebEngineView::loading

    Returns \c{true} if the HTML page is currently loading, \c{false} otherwise.
*/

/*!
    \qmlproperty string WebEngineView::title

    The title of the currently displaying HTML page, a read-only value
    that reflects the contents of the \c{<title>} tag.
*/

/*!
    \qmlmethod void WebEngineView::loadHtml(string html, url baseUrl)
    \brief Loads the specified \a html as the content of the web view.

    (This method offers a lower-level alternative to the \c{url} property,
    which references HTML pages via URL.)

    External objects such as stylesheets or images referenced in the HTML
    document are located relative to \a baseUrl. For example if provided \a html
    was originally retrieved from \c http://www.example.com/documents/overview.html
    and that was the base url, then an image referenced with the relative url \c diagram.png
    would be looked for at \c{http://www.example.com/documents/diagram.png}.

    \sa WebEngineView::url
*/

/*!
    \qmlsignal WebEngineView::onLoadingChanged(loadRequest)

    Occurs when any page load begins, ends, or fails. Various read-only
    parameters are available on the \a loadRequest:

    \list

    \li \c{url}: the location of the resource that is loading.

    \li \c{status}: Reflects one of four load states:
    \c{LoadStartedStatus}, \c{LoadStoppedStatus},
    \c{LoadSucceededStatus}, or \c{LoadFailedStatus}.
    See \c{WebEngineView::LoadStatus}.

    \li \c{errorString}: description of load error.

    \li \c{errorCode}: HTTP error code.

    \li \c{errorDomain}: high-level error types, one of
    \c{NetworkErrorDomain}, \c{HttpErrorDomain}, \c{InternalErrorDomain},
    \c{DownloadErrorDomain}, or \c{NoErrorDomain}.  See
    \l{WebEngineView::ErrorDomain}.

    \endlist

    \sa WebEngineView::loading
*/

/*!
    \qmlsignal WebEngineView::onLinkHovered(hoveredUrl, hoveredTitle)

    Within a mouse-driven interface, this signal is emitted when a mouse
    pointer passes over a link, corresponding to the \c{mouseover} DOM
    event.  (May also occur in touch interfaces for \c{mouseover} events
    that are not cancelled with \c{preventDefault()}.)  The \a{hoveredUrl}
    provides the link's location, and the \a{hoveredTitle} is any avalable
    link text.
*/

/*!
    \qmlproperty enumeration WebEngineView::ErrorDomain

    Details various high-level error types.

    \table

    \header
    \li Constant
    \li Description

    \row
    \li InternalErrorDomain
    \li Content fails to be interpreted by Qt WebEngine.

    \row
    \li ConnectionErrorDomain
    \li Error results from faulty network connection.

    \row
    \li HttpErrorDomain
    \li Error is produced by server.

    \row
    \li CertificateErrorDomain
    \li Error related to the SSL/TLS certficate.

    \row
    \li FtpErrorDomain
    \li An error related to the file transfer protocol.

    \row
    \li DnsErrorDomain
    \li An error related to DNS lookup.

    \row
    \li NoErrorDomain
    \li Unspecified fallback error.

    \endtable
*/

/*!
    \qmlproperty enumeration WebEngineView::JavaScriptConsoleMessageLevel

    Indicates the severity of a JavaScript console message.

    \table

    \header
    \li Constant
    \li Description

    \row
    \li InfoMessageLevel
    \li Message is purely informative and should be safe to ignore.

    \row
    \li WarningMessageLevel
    \li Message indicates there might be a problem that may need attention.

    \row
    \li ErrorMessageLevel
    \li Message indicates there has been an error.

    \endtable
*/

/*!
    \qmlproperty enumeration WebEngineView::LoadStatus

    Reflects a page's load status.

    \table

    \header
    \li Constant
    \li Description

    \row
    \li LoadStartedStatus
    \li Page is currently loading.

    \row
    \li LoadSucceededStatus
    \li Page has successfully loaded, and is not currently loading.

    \row
    \li LoadFailedStatus
    \li Page has failed to load, and is not currently loading.

    \endtable
*/
