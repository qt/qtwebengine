import("//build/config/features.gni")

config("qt_libpng_config") {
    include_dirs =  [ @GN_PNG_INCLUDES@ ]
    defines = [ "USE_SYSTEM_LIBPNG" ]
}
config ("qt_libjpeg_config") {
    include_dirs = [ @GN_JPEG_INCLUDES@ ]
}
config("qt_harfbuzz_config") {
    visibility = [
      "//third_party:freetype_harfbuzz",
      "//third_party/freetype:freetype_source",
    ]
    include_dirs = [ @GN_HARFBUZZ_INCLUDES@ ]
}
config("qt_freetype_config") {
     visibility = [
       "//build/config/freetype:freetype",
       "//third_party:freetype_harfbuzz",
       "//third_party/harfbuzz-ng:harfbuzz_source",
     ]
     include_dirs = [ @GN_FREETYPE_INCLUDES@ ]
}

config("QtPdf_config") {
  cflags = [
    @GN_CFLAGS_C@,
  ]
  cflags_cc = [
    @GN_CFLAGS_CC@,
  ]
  defines = [
    @GN_DEFINES@,
  ]
  include_dirs = [
    @GN_INCLUDE_DIRS@,
    rebase_path("${target_gen_dir}/.moc/")
  ]
}

config("cpp17_config") {
  # static initialized constexpr expressions must be compiled always as c++14 or always as c++17
  # and our qtwebengine core sources use them as c++17
  if (is_win) {
    cflags_cc = [ "/std:c++17" ]
  } else {
    cflags_cc = [ "-std=c++17" ]
  }
}

static_library("QtPdf") {
  complete_static_lib = true
  rsp_types = [ "objects", "archives", "libs", "lflags" ]
  configs += [
    ":cpp17_config",
    ":QtPdf_config"
  ]
  deps = [
    "//third_party/pdfium"
  ]
  if (is_win) {
    libs = [
      "dloadhelper.lib",
      "winmm.lib",
    ]
  }
}
